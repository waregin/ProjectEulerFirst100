# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
# Triangle: T_n=n(n+1)/2        1, 3, 6, 10, 15, ...
# Pentagonal: P_n=n(3n - 1)/2   1, 5, 12, 22, 35, ...
# Hexagonal: H_n=n(2n - 1)      1, 6, 15, 28, 45, ...
# It can be verified that T_285 = P_165 = H_143 = 40755
# Find the next triangle number that is also pentagonal and hexagonal.

# pentagonal formula: (1 +- ((1 + (24 * x)) ** 0.5)) / 6
# hexagonal formula: (1 +- ((1 + (8 * x)) ** 0.5)) / 4
# x = n(2n - 1)
# x = 2n^2 - n
# 0 = 2n^2 - n - x
# (-b +- sqrt(b^2 - 4ac))/2a
# (1 + ((1 + (8 * x)) ** 0.5)) / 4


def is_valid_n(n):
    return n > 0 and n % 1 == 0


def find_n_p(p):
    n1 = (1 + ((1 + (24 * p)) ** 0.5)) / 6
    n2 = (1 - ((1 + (24 * p)) ** 0.5)) / 6
    if is_valid_n(n1):
        return n1
    if is_valid_n(n2):
        return n2
    return -1


def find_n_h(h):
    n1 = (1 + ((1 + (8 * h)) ** 0.5)) / 4
    n2 = (1 - ((1 + (8 * h)) ** 0.5)) / 4
    if is_valid_n(n1):
        return n1
    if is_valid_n(n2):
        return n2
    return -1


from datetime import datetime

print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}")

n = 285
t = 0
n_p = 0
n_h = 0
while True:
    n += 1
    t = int(n * (n + 1) / 2)
    n_p = int(find_n_p(t))
    n_h = int(find_n_h(t))
    if n_p > 0 and n_h > 0:
        break

print(
    f"found triangle number for n = {n} to be {t}, which is equal to pentagonal number for n = {n_p} and hexagonal number for n = {n_h}"
)
print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}")
