# <p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:
# $$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots$$</p>
# <p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>
# <p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised;
#  what is the value of $D$?</p>
from datetime import datetime

print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}")
limit = 10001

# First, generate 100 pentagonal numbers
pentagonals = [0]
for n in range(1, limit):
    pentagonals.append(int(n * ((3 * n) - 1) / 2))

# .5n * .5(3n - 1)
# .5n * (1.5n - .5)
# .75n^2 - .25n

# x = n * ((3 * n) - 1) / 2
# 2x = n(3n - 1)
# 0 = 3n^2 - n - 2x

#  6 = n * ((3 * n) - 1) / 2
#  12 = n(3n - 1)
# 12 = 3n^2 - n
# 0 = 3n^2 - n + 12
# n = 12/(3n + 1)
# n = 12/3n + 12
# (-b +- sqrt(b^2 - 4ac))/2a
# n1 = (1 + sqrt(1 + 24sum))/6
# n2 = (1 - sqrt(1 + 24sum))/6

# Next, go through each pair and find those with sum and difference pentagonal
# save smallest different
smallest = 10000000000000000000000
for j in range(1, len(pentagonals)):
    for k in range(j + 1, len(pentagonals)):
        pj = pentagonals[j]
        pk = pentagonals[k]
        sum = pj + pk
        dif = pk - pj
        if dif >= smallest:
            continue
        sum_n1 = (1 + ((1 + (24 * sum)) ** 0.5)) / 6
        sum_n2 = (1 - ((1 + (24 * sum)) ** 0.5)) / 6
        dif_n1 = (1 + ((1 + (24 * dif)) ** 0.5)) / 6
        dif_n2 = (1 - ((1 + (24 * dif)) ** 0.5)) / 6

        if (
            (
                sum_n1 > 0
                and sum_n1 % 1 == 0
                and int(sum_n1) < len(pentagonals)
                and pentagonals[int(sum_n1)] == sum
            )
            or (
                sum_n2 > 0
                and sum_n2 % 1 == 0
                and int(sum_n2) < len(pentagonals)
                and pentagonals[int(sum_n2)] == sum
            )
        ) and (
            (
                dif_n1 > 0
                and dif_n1 % 1 == 0
                and int(dif_n1) < len(pentagonals)
                and pentagonals[int(dif_n1)] == dif
            )
            or (
                dif_n2 > 0
                and dif_n2 % 1 == 0
                and int(dif_n2) < len(pentagonals)
                and pentagonals[int(dif_n2)] == dif
            )
        ):
            print(
                f"found possible pair {pentagonals[j]} and {pentagonals[k]} with sum of {sum} and dif of {dif}"
            )
            smallest = dif

print(smallest)
print(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')}")
